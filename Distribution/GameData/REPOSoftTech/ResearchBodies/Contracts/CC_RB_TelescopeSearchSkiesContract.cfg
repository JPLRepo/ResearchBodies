CONTRACT_TYPE
{
	name = RB_TeleScopeSearchSkies
	group = ResearchBodies
	
	title = #autoLOC_RBodies_00084 //Search the Skies with a Telescope
	
	genericTitle = #autoLOC_RBodies_00085 //Search the Skies with a Telescope
	
	description = #autoLOC_RBodies_00086 //Use a telescope on a vessel to search the Skies for Celestial Bodies.
	
	genericDescription = #autoLOC_RBodies_00087 //Use a telescope on a vessel to search the Skies for Celestial Bodies.
	
	sortKey = 1
	
	notes = #autoLOC_RBodies_00088 //You need a telescope capable of finding bodies at the correct altitude.
	
	synopsis = #autoLOC_RBodies_00089 //Once in position the telescope will conduct a long term search of the sky.
	
	completedMessage = #autoLOC_RBodies_00071 //We have found something in the sky that should be investigated further. Go to the Observatory to find out more.
	
	agent = REPOSoftTech
	
	cancellable = false
	
	maxSimultaneous = 1
	
	//prestige = Significant
	//targetBody = HomeWorld()
	
	//rewardScience = 100.0
    //rewardReputation = 20.0
    //rewardFunds = 100000.0
	advanceFunds = -100000.0
	
	trace=false
		
	PARAMETER
	{
		name = PartValidation
		type = PartValidation
		partModule = ModuleTrackBodies
		minCount = 1
		title = #autoLOC_RBodies_00090 //You must have a Telescope part with ModuleTrackBodies on your vessel.
	}	
	
	PARAMETER
	{
		name = Orbit
		type = Orbit
		targetBody = HomeWorld()
		situation = ORBITING
		minAltitude = 200000
		title = #autoLOC_RBodies_00091 //The vessel must be in orbit above 200000 meters.
	}
	
	PARAMETER
	{
		name = Duration
		type = Duration		
		duration = 90d		
		preWaitText = #autoLOC_RBodies_00092 //The telescope will search the skies for a period of time.
		waitingText = #autoLOC_RBodies_00073 //Searching the Skies.
		completionText = #autoLOC_RBodies_00074 //The search is over.
		startCriteria = PARAMETER_COMPLETION
		parameter = Orbit
	}

    REQUIREMENT
	{
		name = ReachSpaceTSS
		type = ReachSpace
	}
		
	REQUIREMENT
	{
		name = RBUndiscoveredBodiesMSS
		type = RBUndiscoveredBodies	
		host = ModuleTrackBodies
	}		
	
    // The BEHAVIOUR node adds additional special contract level behaviour.
    // See the Behaviours page for examples of all supported behaviours.
    BEHAVIOUR
    {
        name = RBSearchSkiesBehaviourSS
    // The type defines the type of Behaviour.  See the Behaviours page
    // for all supported Contract Configurator behaviours.
        type = RBSearchSkiesBehaviour
    }
	
	BEHAVIOUR
	{
		name = OrbitGenerator
		type = OrbitGenerator
		// Use this to generate an orbit with some randomization
		RANDOM_ORBIT
		{			
			targetBody = HomeWorld()			
			type = RANDOM
			// A factor between 0.0 and 1.0 which indicates how high the orbit
			// can be.  A value of 1.0 indicates the orbit may go as far out as
			// the body's sphere of influence, whereas a value of 0.0
			// represents the minimum altitude possible.
			//
			// Type:      double
			// Required:  No (defaulted)
			// Default:   0.8
			//
			altitudeFactor = 0.5

			// A factor between 0.0 which indicates the maximum possible
			// inclination for the generated orbit.  A value of 0.0 means the
			// orbit must always be equatorial.  A value of 1.0 means the orbit
			// can be anywhere between 0 and 90 degrees inclined.  This is
			// ignored for EQUATORIAL, POLAR and STATIONARY.
			//
			// Type:      double
			// Required:  No (defaulted)
			// Default:   0.8
			//
			inclinationFactor = 0.4

			// The eccentricity of the orbit.  Ignored for all but SYNCHRONOUS.
			//
			// Type:      double
			// Required:  No (defaulted)
			// Default:   0.0
			//
			eccentricity = 0.0

			// The amount the player is allowed to deviate from this orbit in
			// the ReachSpecificOrbit parameter.  Lower numbers are more
			// difficult.
			//
			// Type:      double
			// Required:  No (defaulted)
			// Default:   10.0
			//
			deviationWindow = 10.0
		}
	}
}